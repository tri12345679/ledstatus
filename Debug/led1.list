
led1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000698  08000698  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000698  08000698  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000698  08000698  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000698  08000698  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000698  08000698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800069c  0800069c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006a4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000155b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055f  00000000  00000000  0002158f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00021af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00021d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014cb  00000000  00000000  00021ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f56  00000000  00000000  00023393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6f2  00000000  00000000  000252e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a39db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b0  00000000  00000000  000a3a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000680 	.word	0x08000680

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000680 	.word	0x08000680

080001d8 <Clock_HSE_Init>:



#include<stdint.h>
void Clock_HSE_Init()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	uint32_t* CR =(uint32_t*)0x40023800;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <Clock_HSE_Init+0x44>)
 80001e0:	607b      	str	r3, [r7, #4]
	uint32_t* CFGR =(uint32_t*)0x40023808;
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <Clock_HSE_Init+0x48>)
 80001e4:	603b      	str	r3, [r7, #0]
	*CR |= (1<<16); //enable HSE
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
	while (((*CR >>17)& 1) ==0); // wait HSE ready
 80001f2:	bf00      	nop
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	0c5b      	lsrs	r3, r3, #17
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f8      	beq.n	80001f4 <Clock_HSE_Init+0x1c>
	*CFGR |= (0b01 << 0); // set HSE as system clock
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 0201 	orr.w	r2, r3, #1
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	40023808 	.word	0x40023808

08000224 <LED_Init>:
enum{
	INPUT,OUTPUT,ALTERNATE,ANALOG //,MODER12,MODER13,MODER14,MODER15
};

void LED_Init()
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0


	uint32_t* RCC_AHB1ENR = (uint32_t*)0x40023830;
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <LED_Init+0x5c>)
 800022c:	60fb      	str	r3, [r7, #12]
	*RCC_AHB1ENR |= (1 <<3);  // enable clock cho port D
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]

//	uint32_t* RCC_AHB1ENR  = (uint32_t*)(RCC_ADDR_BASE + 0x30);
	uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_ADDR_BASE + 0x00);
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <LED_Init+0x60>)
 800023c:	60bb      	str	r3, [r7, #8]
//	*GPIOD_MODER |=(1 << 24) |  (1 << 26) | (01 << 28) | (1 << 30);

	MODER_t* GPIOD = (MODER_t*)0x40020c00;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <LED_Init+0x60>)
 8000240:	607b      	str	r3, [r7, #4]
	GPIOD->MODER12 = OUTPUT;
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	78d3      	ldrb	r3, [r2, #3]
 8000246:	2101      	movs	r1, #1
 8000248:	f361 0301 	bfi	r3, r1, #0, #2
 800024c:	70d3      	strb	r3, [r2, #3]
	GPIOD->MODER13 = OUTPUT;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	78d3      	ldrb	r3, [r2, #3]
 8000252:	2101      	movs	r1, #1
 8000254:	f361 0383 	bfi	r3, r1, #2, #2
 8000258:	70d3      	strb	r3, [r2, #3]
	GPIOD->MODER14 = OUTPUT;
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	78d3      	ldrb	r3, [r2, #3]
 800025e:	2101      	movs	r1, #1
 8000260:	f361 1305 	bfi	r3, r1, #4, #2
 8000264:	70d3      	strb	r3, [r2, #3]
	GPIOD->MODER15 = OUTPUT;
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	78d3      	ldrb	r3, [r2, #3]
 800026a:	2101      	movs	r1, #1
 800026c:	f361 1387 	bfi	r3, r1, #6, #2
 8000270:	70d3      	strb	r3, [r2, #3]





}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020c00 	.word	0x40020c00

08000288 <LED_ctrl>:
	OFF,
	ON
}Led_state_t;

void LED_ctrl(int led_num, Led_state_t state)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]

	uint32_t* GPIOD_ODR  = (uint32_t*)(GPIOD_ADDR_BASE + 0x14);
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <LED_ctrl+0x50>)
 8000296:	60fb      	str	r3, [r7, #12]
	if(state == OFF)
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10b      	bne.n	80002b6 <LED_ctrl+0x2e>
		*GPIOD_ODR &= ~(1<<(13 + led_num));
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	320d      	adds	r2, #13
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	401a      	ands	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
	else
		*GPIOD_ODR |= (1<<(13 + led_num));
}
 80002b4:	e009      	b.n	80002ca <LED_ctrl+0x42>
		*GPIOD_ODR |= (1<<(13 + led_num));
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	320d      	adds	r2, #13
 80002be:	2101      	movs	r1, #1
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	431a      	orrs	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020c14 	.word	0x40020c14

080002dc <delay>:
	uint32_t* GPIOA_IDR  = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x10);

	return *GPIOA_IDR & 0b000001;
}

void delay(){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0

}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <TIM4_PWM_Init>:
uint16_t cap2_val = 0;



void TIM4_PWM_Init()
{
 80002ec:	b480      	push	{r7}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
	uint32_t* RCC_AHB1ENR = (uint32_t*)0x40023830;
 80002f2:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <TIM4_PWM_Init+0xc0>)
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
	*RCC_AHB1ENR |= (1<<3);
 80002f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 0208 	orr.w	r2, r3, #8
 80002fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000300:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOD_MODER = (uint32_t*)0x40020c00;
 8000302:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <TIM4_PWM_Init+0xc4>)
 8000304:	623b      	str	r3, [r7, #32]
	*GPIOD_MODER &= ~(0b11 << 24);
 8000306:	6a3b      	ldr	r3, [r7, #32]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800030e:	6a3b      	ldr	r3, [r7, #32]
 8000310:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b10 << 24);
 8000312:	6a3b      	ldr	r3, [r7, #32]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800031a:	6a3b      	ldr	r3, [r7, #32]
 800031c:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOD_AFRH = (uint32_t*)0x40020c24;
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <TIM4_PWM_Init+0xc8>)
 8000320:	61fb      	str	r3, [r7, #28]
	*GPIOD_AFRH |= (0b0010<<16);
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	601a      	str	r2, [r3, #0]

	uint32_t* RCC_APB1ENR = (uint32_t*)0x40023840;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <TIM4_PWM_Init+0xcc>)
 8000330:	61bb      	str	r3, [r7, #24]
	*RCC_APB1ENR |= (1<<2);
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f043 0204 	orr.w	r2, r3, #4
 800033a:	69bb      	ldr	r3, [r7, #24]
 800033c:	601a      	str	r2, [r3, #0]
	uint16_t* ARR = (uint16_t*)0x4000082c;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <TIM4_PWM_Init+0xd0>)
 8000340:	617b      	str	r3, [r7, #20]
	uint16_t* PSC = (uint16_t*)0x40000828;
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <TIM4_PWM_Init+0xd4>)
 8000344:	613b      	str	r3, [r7, #16]
	uint32_t* CCR1 = (uint32_t*)0x40000834;
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <TIM4_PWM_Init+0xd8>)
 8000348:	60fb      	str	r3, [r7, #12]
	*ARR = 999; //~100%
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000350:	801a      	strh	r2, [r3, #0]
	*PSC = 16;   // từ 16MHZ có thể set lên 64 Mhz
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	2210      	movs	r2, #16
 8000356:	801a      	strh	r2, [r3, #0]
	*CCR1 = 30;      // có thể thay đôi value 25 lên 30
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	221e      	movs	r2, #30
 800035c:	601a      	str	r2, [r3, #0]
	uint16_t* CCMR1 = (uint16_t*)0x40000818;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <TIM4_PWM_Init+0xdc>)
 8000360:	60bb      	str	r3, [r7, #8]
	*CCMR1 &= ~(0b11);
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	f023 0303 	bic.w	r3, r3, #3
 800036a:	b29a      	uxth	r2, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	801a      	strh	r2, [r3, #0]
	//set 00: CC1 channel is configured as OUTPUT.
	*CCMR1 |= (0b110 << 4);
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000378:	b29a      	uxth	r2, r3
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	801a      	strh	r2, [r3, #0]
	//PWM mode 1

	uint16_t* CCER = (uint16_t*)0x40000820;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <TIM4_PWM_Init+0xe0>)
 8000380:	607b      	str	r3, [r7, #4]
	*CCER |= 1;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	b29a      	uxth	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	801a      	strh	r2, [r3, #0]
	uint32_t* CR1 = (uint32_t*)0x40000800;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <TIM4_PWM_Init+0xe4>)
 8000392:	603b      	str	r3, [r7, #0]
	*CR1 |= 1;
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f043 0201 	orr.w	r2, r3, #1
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	372c      	adds	r7, #44	; 0x2c
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40023830 	.word	0x40023830
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40020c24 	.word	0x40020c24
 80003b8:	40023840 	.word	0x40023840
 80003bc:	4000082c 	.word	0x4000082c
 80003c0:	40000828 	.word	0x40000828
 80003c4:	40000834 	.word	0x40000834
 80003c8:	40000818 	.word	0x40000818
 80003cc:	40000820 	.word	0x40000820
 80003d0:	40000800 	.word	0x40000800

080003d4 <Time5_Capture>:
}


// doc van toc dong co
void Time5_Capture()
{
 80003d4:	b480      	push	{r7}
 80003d6:	b08b      	sub	sp, #44	; 0x2c
 80003d8:	af00      	add	r7, sp, #0
	uint32_t* RCC_AHB1ENR = (uint32_t*)0x40023830;
 80003da:	4b42      	ldr	r3, [pc, #264]	; (80004e4 <Time5_Capture+0x110>)
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
	*RCC_AHB1ENR |= (1<<0);
 80003de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e8:	601a      	str	r2, [r3, #0]
	uint32_t* MODER = (uint32_t*)0x40020000;	// GPIOA
 80003ea:	4b3f      	ldr	r3, [pc, #252]	; (80004e8 <Time5_Capture+0x114>)
 80003ec:	623b      	str	r3, [r7, #32]
	*MODER &= ~(0b11);
 80003ee:	6a3b      	ldr	r3, [r7, #32]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f023 0203 	bic.w	r2, r3, #3
 80003f6:	6a3b      	ldr	r3, [r7, #32]
 80003f8:	601a      	str	r2, [r3, #0]
	*MODER |= (0b10);
 80003fa:	6a3b      	ldr	r3, [r7, #32]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f043 0202 	orr.w	r2, r3, #2
 8000402:	6a3b      	ldr	r3, [r7, #32]
 8000404:	601a      	str	r2, [r3, #0]
	uint32_t* AFRL = (uint32_t*)0x40020020;		//GPIOA
 8000406:	4b39      	ldr	r3, [pc, #228]	; (80004ec <Time5_Capture+0x118>)
 8000408:	61fb      	str	r3, [r7, #28]
	*AFRL |= 2;
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0202 	orr.w	r2, r3, #2
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	601a      	str	r2, [r3, #0]

	uint32_t* RCC_APB1ENR = (uint32_t*)0x40023840;
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <Time5_Capture+0x11c>)
 8000418:	61bb      	str	r3, [r7, #24]
	*RCC_APB1ENR |= (1<<3);
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f043 0208 	orr.w	r2, r3, #8
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	601a      	str	r2, [r3, #0]
	//timer basic
	//uint32_t* CR1 = (uint32_t*)0x40000c00;
	uint32_t* CR1 = (uint32_t*) (TIMER5_BASE);			//control register
 8000426:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <Time5_Capture+0x120>)
 8000428:	617b      	str	r3, [r7, #20]
	uint32_t* PSC = (uint32_t*) (TIMER5_BASE + 0x28);	//pre-scaler
 800042a:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <Time5_Capture+0x124>)
 800042c:	613b      	str	r3, [r7, #16]
	uint32_t* ARR = (uint32_t*) (TIMER5_BASE + 0x2C);   //auto reload register
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <Time5_Capture+0x128>)
 8000430:	60fb      	str	r3, [r7, #12]
	//ftimer (div: 1) = 16 000 000 cnt --> 1000 ms
	//(div: 16 000) = 1 cnt --> 1 ms
	*PSC = 16000 - 1;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000438:	601a      	str	r2, [r3, #0]
	*ARR = 0xffff;   //65535 = ffff cua CCR1
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000440:	601a      	str	r2, [r3, #0]

	// timer capture Channel 1 - rising
	uint16_t* CCER = (uint16_t*) (TIMER5_BASE + 0x20);
 8000442:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <Time5_Capture+0x12c>)
 8000444:	60bb      	str	r3, [r7, #8]
	uint16_t* CCMR1 = (uint16_t*) (TIMER5_BASE + 0x18);
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <Time5_Capture+0x130>)
 8000448:	607b      	str	r3, [r7, #4]
	*CCER &= ~((1<< 1) | (1<<3));					//select trigger 1 rising(len) for TI1FP1
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	f023 030a 	bic.w	r3, r3, #10
 8000452:	b29a      	uxth	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	801a      	strh	r2, [r3, #0]
	*CCMR1 |= 0b01;									//select TI1FP1 for IC1=InputCapture1
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	b29a      	uxth	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	801a      	strh	r2, [r3, #0]
	*CCER |= 1;										//enable capture channel 1
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	b29a      	uxth	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	801a      	strh	r2, [r3, #0]
	 //timer capture Channel 2 - falling
	*CCER &= ~( (1<<7));							//select trigger 1 falling(xg) for TI1FP1
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800047c:	b29a      	uxth	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	801a      	strh	r2, [r3, #0]
	*CCER |= (1<< 5) ;
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	b29a      	uxth	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	801a      	strh	r2, [r3, #0]
	*CCMR1 |= 0b10 << 8;							//select trigger TI1FP2 for IC2
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000498:	b29a      	uxth	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	801a      	strh	r2, [r3, #0]
	*CCER |= 1 << 4;								//enable capture channel 2
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	801a      	strh	r2, [r3, #0]

	// timer slave mode control reset cnt when rising
	uint16_t* SMCR = (uint16_t*) (TIMER5_BASE + 0X08);
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <Time5_Capture+0x134>)
 80004ae:	603b      	str	r3, [r7, #0]
	*SMCR |= 0b100;									//selection slave reset mode
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	801a      	strh	r2, [r3, #0]
	*SMCR |= 0b101 << 4;							//select trigger source is TI1FP1
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	801a      	strh	r2, [r3, #0]

	*CR1 |= 1;										//enable count
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f043 0201 	orr.w	r2, r3, #1
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	601a      	str	r2, [r3, #0]

}
 80004d8:	bf00      	nop
 80004da:	372c      	adds	r7, #44	; 0x2c
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40023830 	.word	0x40023830
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40020020 	.word	0x40020020
 80004f0:	40023840 	.word	0x40023840
 80004f4:	40000c00 	.word	0x40000c00
 80004f8:	40000c28 	.word	0x40000c28
 80004fc:	40000c2c 	.word	0x40000c2c
 8000500:	40000c20 	.word	0x40000c20
 8000504:	40000c18 	.word	0x40000c18
 8000508:	40000c08 	.word	0x40000c08

0800050c <main>:

void main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0



	LED_Init();
 8000510:	f7ff fe88 	bl	8000224 <LED_Init>
	TIM4_PWM_Init();
 8000514:	f7ff feea 	bl	80002ec <TIM4_PWM_Init>
	Time5_Capture();
 8000518:	f7ff ff5c 	bl	80003d4 <Time5_Capture>
	//button_init();

	Clock_HSE_Init();
 800051c:	f7ff fe5c 	bl	80001d8 <Clock_HSE_Init>
	while(1)
	{
		LED_ctrl(1, ON);
 8000520:	2101      	movs	r1, #1
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff feb0 	bl	8000288 <LED_ctrl>
		delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f7ff fed6 	bl	80002dc <delay>

		LED_ctrl(1, OFF);
 8000530:	2100      	movs	r1, #0
 8000532:	2001      	movs	r0, #1
 8000534:	f7ff fea8 	bl	8000288 <LED_ctrl>
		delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053c:	f7ff fece 	bl	80002dc <delay>
		LED_ctrl(1, ON);
 8000540:	e7ee      	b.n	8000520 <main+0x14>

08000542 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <NMI_Handler+0x4>

08000548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <HardFault_Handler+0x4>

0800054e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <MemManage_Handler+0x4>

08000554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <BusFault_Handler+0x4>

0800055a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <UsageFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058e:	f000 f83f 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c2:	490e      	ldr	r1, [pc, #56]	; (80005fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005d8:	4c0b      	ldr	r4, [pc, #44]	; (8000608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005e6:	f7ff ffd7 	bl	8000598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f000 f825 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f7ff ff8d 	bl	800050c <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000600:	080006a0 	.word	0x080006a0
  ldr r2, =_sbss
 8000604:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000608:	20000024 	.word	0x20000024

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000000 	.word	0x20000000
 8000634:	20000020 	.word	0x20000020

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	; (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	; (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	; (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	; (800067c <__libc_init_array+0x44>)
 800064c:	f000 f818 	bl	8000680 <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08000698 	.word	0x08000698
 8000674:	08000698 	.word	0x08000698
 8000678:	08000698 	.word	0x08000698
 800067c:	0800069c 	.word	0x0800069c

08000680 <_init>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr

0800068c <_fini>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr
